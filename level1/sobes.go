/*
Есть шардированное хранилище товаров, шардирование происходит по ID товара
В аргументах запуска шарды указан фильтр и лимит
Фильтр - возрастающая последовательность [start,end] (включительно) ID товаров которые храняться в шарде, они не пересекаются
Лимит - количество товаров, хранящихся в шарде

К примеру в хранилище находится 100_000 товаров, хранилище имеет 6 шард
1 : [1,20_000], 20_000
2: [20_001,40_000], 20_000
3: [40_001,60_000], 20_000
4: [60_001,80_000], 20_000
5: [80_001,90_000], 10_000
6: [90_001,100_000], 10_000

В своем сервисе мы работаем с ID товаров, нам нужно узнать какой шарде принадлежит товар
В сервисе есть актуальные фильтры и лимиты шард, они хранятся в виде слайса структур

Задача: для заданного id товара определить, в какой шарде он находится.
PS в реальности шард очень много, используйте оптимальное решение
*/

package main

import "fmt"

type Shard struct {
	name  string
	start int
	end   int
	limit int
}

func selectShard(productId int, shards []Shard) Shard {
	// O(1)
	// idx := productId / limit
	// можно сделать мапу где ключ - start, значение - номер шарда

	//реализация
	// O(n)
	//это почти рабочее решение, 2 ошибки есть, но можно сделать быстрее чем 0(n)
	//вот теперь рабочее, попробуй сделать быстрее по алгоритмической сложности
	for _, v := range shards {
		if v.start <= productId && v.end >= productId {
			return v
		}
	}

	// O(log n)
	start, end := 0, len(shards)-1
	for start <= end {
		mid := start + (end-start)/2

		if shards[mid].start <= productId && shards[mid].end >= productId {
			return shards[mid]
		} else if shards[mid].end < productId { // двигаем start
			start = mid + 1
		} else { // двигаем end
			end = mid - 1
		}
	}

	// 0  1    2    3    4    5    6
	// 1, 20k, 40k, 60k, 80k, 90k, 100k
	//            55k
	// s                             e
	//1th  s            m                e
	//2th  s            e
	//3th  s  m         e
	//4th     s    m    e
	//5th

	return shards[0]
}

func shardsInfo() []Shard {
	return []Shard{
		{"1", 1, 20_000, 20_000},
		{"2", 20_001, 40_000, 20_000},
		{"3", 40_001, 60_000, 20_000},
		{"4", 60_001, 80_000, 20_000},
		{"5", 80_001, 90_000, 10_000},
		{"6", 90_001, 100_000, 10_000},
	}
}

func TaskSobes() {
	shards := shardsInfo()
	productId := 55_555
	shard := selectShard(productId, shards)
	fmt.Println(shard.name) //3
}
